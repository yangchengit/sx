#!/usr/bin/env node
var readline = require('readline');
var path = require('path');
var fs = require('fs');
var jsjs = require('node-jsjs');

var modules = ["child_process", "cluster", "console", "crypto", "dns", 
    "domain", "events", "fs", "http", "https", "net", "os", "path", "punycode", 
    "querystring", "readline", "repl", "stream", "url", "util", "vm"];

// Here goes libraries which are normally required under a different name
var libs = { _: 'lodash', be: 'be-async' };

// Hack to require from cwd()
var lrequire = require('module').prototype.require;

// Tries to call arguments from a list of functions
function tryCall(fn){
    try {
        if (arguments.length >= 2){
            return fn.apply(null, arguments[arguments.length-1]);
        }
    } catch (e) {
        return tryCall.apply(null, [].slice.call(arguments, 1)); 
    }
}

// Failover require
function frequire(name, fail) {
    if (name in libs) {
        name = libs[name];
    }
    var loaded = tryCall(lrequire, require, [name]);
    if (!loaded && fail) return fail(name);
    return loaded;
}

// Context exposed to program
var context = { require: frequire, process: process, global: global };

// Command-line arguments
var program = require('commander') 
  .version(require('../package').version)
  .usage('[options] "commands"')
  .option('-p, --pretty', 'pretty print JSON output') 
  .option('-j, --json', 'interpret input as json') 
  .option('-x, --line', 'expose each input line as `x`') 
  .option('-b, --buffer', 'expose all input as `b`') 
  .option('-l, --list', 'expose all input lines as `l`') 
  .option('-a, --async', 'expect asynchronous output, callback is `a`') 
  .option('-f, --filter', 'input passes if predicate returns true') 
  .option('-s, --string', 'print current object\'s toString()') 
  .option('-i, --infile [file]', 'read from file instead of stdin')
  .option('-o, --outfile [file]', 'write to file instead of stdout')
  .option('-F, --file [file]', 'read from and write to file instead of stdin and stdout')
  .option('-c, --complete [word]', 'return completions for input (used by shells)') 
  .option('-C, --completion', 'return completion script (bash & zsh)') 
  .option('-E, --escaping', 'return auto-escaping script (zsh)') 
  .parse(process.argv);

// Auto-completion and package browsing
if ('complete' in program){ 
    if (program.complete.lastIndexOf('.') !== -1){
        var completion;
        if (completion = program.complete.match(/([a-z_\.$][a-z0-9_\.$]*)\.?$/i)){
            var parts = completion[1].split('.');
            var name = parts.shift();
            var library = name in context ? context[name] : frequire(name);
            var list = function(prefix, library){
                console.log(Object.keys(library).map(function(key){
                    return prefix + "." + key;
                }).join('\n'));
            };
            if (library){
                if (parts.length){
                    while (parts.length && Object.keys(library).indexOf(parts[0]) !== -1)
                        library = library[parts.shift()];
                    var nameSpace = completion[1].split('.');
                    if (parts.length) nameSpace = nameSpace.slice(0, -1);
                    list(nameSpace.join('.'), library);
                } else list(name, library);
            } 
        }
    } else console.log(modules.join('\n'));
    process.exit(0);
}

if (program.completion){
    var script = path.resolve(__dirname, "../extra/completion.sh");
    console.log(fs.readFileSync(script, 'utf-8'));
    process.exit(0);
}

if (program.escaping){
    var script = path.resolve(__dirname, "../extra/escaping.sh");
    console.log(fs.readFileSync(script, 'utf-8'));
    process.exit(0);
}

// Auto-return and expose context
try {
    var stree = jsjs.parse(program.args.join(' '));
} catch (err){
    if (err.name === 'SyntaxError'){
        var source = program.args.join(' ');
        console.log(source);
        console.log((new Array(err.column)).join(' ') + '^');
        console.log("SyntaxError: unexpected token " + source.substr(err.column-1, 1));
        process.exit(1);
    }
}
if (stree && stree.elements && stree.elements.length){
    if (!program.async) stree.elements.splice(stree.elements.length-1, 1, 
        { "type": "ReturnStatement", value: stree.elements.slice(-1)[0] });
    stree.elements = [{ 
        "type": "WithStatement", "environment": { "type": "Variable", "name": "global" },
                "statement": { "type": "Block", "statements": stree.elements }}];
    try {
        program.args = jsjs.compile({squeeze:true})(stree);
    } catch (err){
        console.log("CompilationError: " + err.message);
        process.exit(1);
    }
} else {
    console.log("SyntaxError: Cannot parse input");
    process.exit(1);
}

// Manage end of piped input
process.stdout.on('error', function(err) {
    if (err.code === 'EPIPE') process.exit(0);
    throw err;
}); 

// Check what kind of input we're reading
if (program.infile || program.file){
    var input = fs.readFileSync(program.infile || program.file, 'utf-8');
    if ((program.outfile || program.file) && (program.async || program.line)){
        fs.writeFileSync(program.outfile || program.file, '');
    }
    if (program.buffer || program.list) {
        maybeJson(null, program.buffer && input, program.list && input.split('\n'));
    } else if (program.line) {
        maybeJson(input, null);
    } else {
        run(null, null, null, print);
    }
} else{
    // Use readline to read input line by line
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });
    if (program.buffer || program.list){
        var lines = []; 
        rl.on('line', lines.push.bind(lines)); 
        rl.on('close', function(){
            maybeJson(null, 
                program.buffer && lines.join('\n'), 
                program.list && lines);
        });
    } else if (program.line) {
        rl.on('line', maybeJson);
    } else {
        rl.close();
        run(null, null, null, print);
    }
}

// May parse JSON from inputs
function maybeJson(line, buffer, lines) {
    if (program.buffer) {
        run(null, program.json ? JSON.parse(buffer) : buffer, null, print);
    } else if (program.line && program.list) {
        if (program.json) JSON.parse(lines.join('')).map(function(_line){
            run(_line, null, line, print);
        });
        else lines.map(function(char){
            run(char, null, line, print);
        });
    } else if (program.line) {
        run(program.json ? JSON.parse(line) : line, null, null, print);
    } else if (program.list) {
        if (program.json) lines = lines.map(function(line){
            return JSON.parse(line);
        });
        run(null, null, lines, print);
    }
}

// Fetches a missing name from an error stack
function getMissingName(stack) {
    var line = stack.split('\n')[1];
    var column = line.match(/<anonymous>:\d+:(\d+)\)$/)[1];
    var name = program.args.substring(column - 1);
    return name.match(/^[a-z0-9\_]+/i)[0];
}

// Executes the code
function run(line, buffer, lines, fn) {
    try {
        var cmd = Function('x, b, l, a, global', program.args);
        var result = cmd(line, buffer, lines, fn, context);
        if (!program.async){
            if (fn) return fn(result, line, lines);
            return result;
        }
    } catch (err) {
        if (err.type === 'not_defined') {
            var name = getMissingName(err.stack);
            context[name] = frequire(name, function(name) {
                console.error('error: couldn\'t load "' + name + '"');
                process.exit(1);
            }); 
            run(line, buffer, lines, fn);
        } else {
            throw err;
        }
    }
}

// Prints results
function print(result, line, lines) { 
    var args = [].slice.call(arguments, 1);
    if (program.string) {
        result = "// vim: filetype=javascript\n" + result.toString();
    } 
    if (typeof result === 'function') {
        if (program.line) {
            result = result(line);
        } else if (program.list) {
            result = result(list);
        }
    }
    if (program.filter) { 
        if (result) result = line;
        else result = undefined;
    }
    try { 
        if (typeof result === 'object') {
            if (program.pretty) {
                result = JSON.stringify(result, null, 4);
            } else result = JSON.stringify(result, null, 0);
        }
    } finally { 
        if (result !== undefined) {
            if (program.outfile || program.file){
                if (program.async || program.line){
                    fs.appendFileSync(program.outfile || program.file, result, 'utf-8');
                } else {
                    fs.writeFileSync(program.outfile || program.file, result, 'utf-8');
                }
            } else {
                console.log(result);
            }
        }
    } 
};
